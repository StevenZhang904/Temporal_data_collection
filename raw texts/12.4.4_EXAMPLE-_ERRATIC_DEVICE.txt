Let us extend our device example to erratic devices. If a device is erratic, then
when it is turned on, it may or may not go on. We introduce the determining fluent
DeterminingFluent(d). We add a cancellation axiom that states that if a device is
erratic and the determining fluent is true, then the device is Ab1:
HoldsAt(Erratic(d), t) ∧
HoldsAt(DeterminingFluent(d), t) ⇒
Ab1(d, t)
(12.23)
Now suppose that the device’s switch is not broken, the device is plugged in, the
device is erratic, and Nathan turns on the device at timepoint 0. We can show that
if DeterminingFluent(Device1) is false at timepoint 0, then the device will be on
at timepoint 1. But if DeterminingFluent(Device1) is true at timepoint 0, then the
device will not be on at timepoint 1. We use the following observations. The device
is erratic:
HoldsAt(Erratic(Device1), 0)
(12.24)
The determining fluent is always released from the commonsense law of inertia, and
On, BrokenSwitch, PluggedIn, and Erratic are never released from this law:
ReleasedAt(DeterminingFluent(d), t)
¬ReleasedAt(On(d), t)
(12.25)
(12.26)
¬ReleasedAt(BrokenSwitch(d), t)
¬ReleasedAt(PluggedIn(d), t)
¬ReleasedAt(Erratic(d), t)
(12.29)