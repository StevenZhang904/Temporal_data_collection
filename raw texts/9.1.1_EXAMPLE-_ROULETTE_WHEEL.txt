We consider the example of spinning a roulette wheel that can land on the numbers 1,
2, or 3. We use a determining fluent WheelNumberDeterminer. We make the wheel
an argument of this fluent so that at any given timepoint different wheels may land
on different numbers. This fluent is released from the commonsense law of inertia:
ReleasedAt(WheelNumberDeterminer(w, n), t)
(9.1)
For any given wheel, this fluent specifies one of the numbers 1, 2, or 3 at any given
timepoint:
HoldsAt(WheelNumberDeterminer(w, n), t) ⇒
n = 1 ∨ n = 2 ∨ n = 3
(9.2)
And for any given wheel, this fluent specifies a unique number at any given
timepoint:
HoldsAt(WheelNumberDeterminer(w, n1), t) ∧
HoldsAt(WheelNumberDeterminer(w, n2), t) ⇒
n1 = n2
(9.3)
We have several effect axioms. If the determining fluent specifies a particular number
for a wheel and a dealer spins the wheel, then the wheel will be on that number:
HoldsAt(WheelNumberDeterminer(w, n), t) ⇒
Initiates(Spin(d, w), WheelNumber(w, n), t)
(9.4)
If a wheel is on one number, the determining fluent specifies another number for the
wheel, the first number is different from the second number, and a dealer spins the
wheel, then the wheel will no longer be on the first number:
HoldsAt(WheelNumber(w, n1), t) ∧
HoldsAt(WheelNumberDeterminer(w, n2), t) ∧
n1 (cid:5)= n2 ⇒
Terminates(Spin(d, w), WheelNumber(w, n1), t)
(9.5)
If a dealer resets a wheel, then the wheel is no longer on any number:
Terminates(Reset(d, w), WheelNumber(w, n), t)
(9.6)
We have a state constraint that says that the wheel is on at most one number at a time:
HoldsAt(WheelNumber(w, n1), t) ∧
HoldsAt(WheelNumber(w, n2), t) ⇒
n1 = n2
(9.7)
Suppose that a wheel that is not on any number is spun:
¬HoldsAt(WheelNumber(Wheel, n), 0)
¬ReleasedAt(WheelNumber(Wheel, n), t)
Happens(Spin(Dealer, Wheel), 0)
(9.8)
(9.9)
(9.10)
We can show that the wheel will be on one of the numbers 1, 2, or 3 and that, if it
lands on a given number, it will still be on that number one timepoint later.